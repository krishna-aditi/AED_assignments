/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Organization;
import Business.Restaurant.Menu;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class RequestOrderJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    
    private UserAccount userAccount;
    
    private RestaurantDirectory restrauantDir;
    
    /**
     * Creates new form RequestLabTestJPanel
     */
    public RequestOrderJPanel(JPanel userProcessContainer, UserAccount account) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        
        this.userAccount = account;
        
        restrauantDir = new RestaurantDirectory();
        
        //populateOrderTable();
        populateRestaurantComboBox();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtComment = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        restaurantMenuJTable = new javax.swing.JTable();
        restaurantJComboBox = new javax.swing.JComboBox();
        lblRestaurant = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderJButton.setText("Place order");
        orderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderJButtonActionPerformed(evt);
            }
        });
        add(orderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, -1, -1));

        jLabel1.setText("Comment:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, -1, 20));
        add(txtComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, 340, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        enterpriseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enterpriseLabel.setText("Please mention special instructions, if any!");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 30));

        restaurantMenuJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Item name", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(restaurantMenuJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, 90));

        restaurantJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        restaurantJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaurantJComboBoxActionPerformed(evt);
            }
        });
        add(restaurantJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, -1, -1));

        lblRestaurant.setText("Pick a restaurant:");
        add(lblRestaurant, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void orderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderJButtonActionPerformed

        String message = txtComment.getText();
        //String orderItem = restaurantMenuJtable.
        
        if(message.equals("") || message.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter a comment.");
            return;
        }
        OrderWorkRequest request = new OrderWorkRequest();
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("Order placed!");
        
        Organization org = null;
        for (Restaurant restaurant : restrauantDir.getRestaurantList()){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        
        JOptionPane.showMessageDialog(null, "Order Placed! ");
        txtComment.setText("");
        
        
        
    }//GEN-LAST:event_orderJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerAreaJPanel dwjp = (CustomerAreaJPanel) component;
        dwjp.populateRequestTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backJButtonActionPerformed

    private void restaurantJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaurantJComboBoxActionPerformed
        Restaurant restaurant = (Restaurant) restaurantJComboBox.getSelectedItem();
        if (restaurant != null){
            populateTable(restaurant);
        }
    }//GEN-LAST:event_restaurantJComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblRestaurant;
    private javax.swing.JButton orderJButton;
    private javax.swing.JComboBox restaurantJComboBox;
    private javax.swing.JTable restaurantMenuJTable;
    private javax.swing.JTextField txtComment;
    // End of variables declaration//GEN-END:variables

    private void populateRestaurantComboBox() {
        restaurantJComboBox.removeAllItems();
        
        for (Restaurant restaurant : restrauantDir.getRestaurantList()){
            restaurantJComboBox.addItem(restaurant);
        }
    }

    private void populateTable(Restaurant restaurant) {
        DefaultTableModel model = (DefaultTableModel) restaurantMenuJTable.getModel();
        
        model.setRowCount(0);

        for (Menu menu : restaurant.getMenuItemList()){
            Object[] row = new Object[3];
            row[0] = menu.getItemId();
            row[1] = menu.getItemName();
            row[2] = menu.getItemPrice();
            model.addRow(row);
        }

    }
    
    
}
